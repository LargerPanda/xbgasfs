// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: bgasfs.proto

#include "bgasfs.pb.h"
#include "bgasfs.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace bgasfsmsg {

static const char* BGASFSMsg_method_names[] = {
  "/bgasfsmsg.BGASFSMsg/ClientRqstFileAttr",
  "/bgasfsmsg.BGASFSMsg/ClientRqstUpdateFileAttr",
  "/bgasfsmsg.BGASFSMsg/ClientRqstIO",
  "/bgasfsmsg.BGASFSMsg/ClientReadRqst",
  "/bgasfsmsg.BGASFSMsg/ClientWriteRqst",
  "/bgasfsmsg.BGASFSMsg/MDSDataPrefetch",
};

std::unique_ptr< BGASFSMsg::Stub> BGASFSMsg::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< BGASFSMsg::Stub> stub(new BGASFSMsg::Stub(channel));
  return stub;
}

BGASFSMsg::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ClientRqstFileAttr_(BGASFSMsg_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientRqstUpdateFileAttr_(BGASFSMsg_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientRqstIO_(BGASFSMsg_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientReadRqst_(BGASFSMsg_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientWriteRqst_(BGASFSMsg_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MDSDataPrefetch_(BGASFSMsg_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status BGASFSMsg::Stub::ClientRqstFileAttr(::grpc::ClientContext* context, const ::bgasfsmsg::FileAttrRqstMsg& request, ::bgasfsmsg::FileAttrRspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientRqstFileAttr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::FileAttrRspMsg>* BGASFSMsg::Stub::AsyncClientRqstFileAttrRaw(::grpc::ClientContext* context, const ::bgasfsmsg::FileAttrRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::FileAttrRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstFileAttr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::FileAttrRspMsg>* BGASFSMsg::Stub::PrepareAsyncClientRqstFileAttrRaw(::grpc::ClientContext* context, const ::bgasfsmsg::FileAttrRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::FileAttrRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstFileAttr_, context, request, false);
}

::grpc::Status BGASFSMsg::Stub::ClientRqstUpdateFileAttr(::grpc::ClientContext* context, const ::bgasfsmsg::UpdateFileAttrRqstMsg& request, ::bgasfsmsg::UpdateFileAttrRspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientRqstUpdateFileAttr_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::UpdateFileAttrRspMsg>* BGASFSMsg::Stub::AsyncClientRqstUpdateFileAttrRaw(::grpc::ClientContext* context, const ::bgasfsmsg::UpdateFileAttrRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::UpdateFileAttrRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstUpdateFileAttr_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::UpdateFileAttrRspMsg>* BGASFSMsg::Stub::PrepareAsyncClientRqstUpdateFileAttrRaw(::grpc::ClientContext* context, const ::bgasfsmsg::UpdateFileAttrRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::UpdateFileAttrRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstUpdateFileAttr_, context, request, false);
}

::grpc::Status BGASFSMsg::Stub::ClientRqstIO(::grpc::ClientContext* context, const ::bgasfsmsg::FileIORqstMsg& request, ::bgasfsmsg::FileIORspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientRqstIO_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::FileIORspMsg>* BGASFSMsg::Stub::AsyncClientRqstIORaw(::grpc::ClientContext* context, const ::bgasfsmsg::FileIORqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::FileIORspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstIO_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::FileIORspMsg>* BGASFSMsg::Stub::PrepareAsyncClientRqstIORaw(::grpc::ClientContext* context, const ::bgasfsmsg::FileIORqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::FileIORspMsg>::Create(channel_.get(), cq, rpcmethod_ClientRqstIO_, context, request, false);
}

::grpc::Status BGASFSMsg::Stub::ClientReadRqst(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOReadRqstMsg& request, ::bgasfsmsg::ClientIOReadRspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientReadRqst_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::ClientIOReadRspMsg>* BGASFSMsg::Stub::AsyncClientReadRqstRaw(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOReadRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::ClientIOReadRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientReadRqst_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::ClientIOReadRspMsg>* BGASFSMsg::Stub::PrepareAsyncClientReadRqstRaw(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOReadRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::ClientIOReadRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientReadRqst_, context, request, false);
}

::grpc::Status BGASFSMsg::Stub::ClientWriteRqst(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOWriteRqstMsg& request, ::bgasfsmsg::ClientIOWriteRspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientWriteRqst_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::ClientIOWriteRspMsg>* BGASFSMsg::Stub::AsyncClientWriteRqstRaw(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOWriteRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::ClientIOWriteRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientWriteRqst_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::ClientIOWriteRspMsg>* BGASFSMsg::Stub::PrepareAsyncClientWriteRqstRaw(::grpc::ClientContext* context, const ::bgasfsmsg::ClientIOWriteRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::ClientIOWriteRspMsg>::Create(channel_.get(), cq, rpcmethod_ClientWriteRqst_, context, request, false);
}

::grpc::Status BGASFSMsg::Stub::MDSDataPrefetch(::grpc::ClientContext* context, const ::bgasfsmsg::DataPrefetchRqstMsg& request, ::bgasfsmsg::DataPrefetchRspMsg* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MDSDataPrefetch_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::DataPrefetchRspMsg>* BGASFSMsg::Stub::AsyncMDSDataPrefetchRaw(::grpc::ClientContext* context, const ::bgasfsmsg::DataPrefetchRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::DataPrefetchRspMsg>::Create(channel_.get(), cq, rpcmethod_MDSDataPrefetch_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::bgasfsmsg::DataPrefetchRspMsg>* BGASFSMsg::Stub::PrepareAsyncMDSDataPrefetchRaw(::grpc::ClientContext* context, const ::bgasfsmsg::DataPrefetchRqstMsg& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::bgasfsmsg::DataPrefetchRspMsg>::Create(channel_.get(), cq, rpcmethod_MDSDataPrefetch_, context, request, false);
}

BGASFSMsg::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::FileAttrRqstMsg, ::bgasfsmsg::FileAttrRspMsg>(
          std::mem_fn(&BGASFSMsg::Service::ClientRqstFileAttr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::UpdateFileAttrRqstMsg, ::bgasfsmsg::UpdateFileAttrRspMsg>(
          std::mem_fn(&BGASFSMsg::Service::ClientRqstUpdateFileAttr), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::FileIORqstMsg, ::bgasfsmsg::FileIORspMsg>(
          std::mem_fn(&BGASFSMsg::Service::ClientRqstIO), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::ClientIOReadRqstMsg, ::bgasfsmsg::ClientIOReadRspMsg>(
          std::mem_fn(&BGASFSMsg::Service::ClientReadRqst), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::ClientIOWriteRqstMsg, ::bgasfsmsg::ClientIOWriteRspMsg>(
          std::mem_fn(&BGASFSMsg::Service::ClientWriteRqst), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      BGASFSMsg_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< BGASFSMsg::Service, ::bgasfsmsg::DataPrefetchRqstMsg, ::bgasfsmsg::DataPrefetchRspMsg>(
          std::mem_fn(&BGASFSMsg::Service::MDSDataPrefetch), this)));
}

BGASFSMsg::Service::~Service() {
}

::grpc::Status BGASFSMsg::Service::ClientRqstFileAttr(::grpc::ServerContext* context, const ::bgasfsmsg::FileAttrRqstMsg* request, ::bgasfsmsg::FileAttrRspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BGASFSMsg::Service::ClientRqstUpdateFileAttr(::grpc::ServerContext* context, const ::bgasfsmsg::UpdateFileAttrRqstMsg* request, ::bgasfsmsg::UpdateFileAttrRspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BGASFSMsg::Service::ClientRqstIO(::grpc::ServerContext* context, const ::bgasfsmsg::FileIORqstMsg* request, ::bgasfsmsg::FileIORspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BGASFSMsg::Service::ClientReadRqst(::grpc::ServerContext* context, const ::bgasfsmsg::ClientIOReadRqstMsg* request, ::bgasfsmsg::ClientIOReadRspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BGASFSMsg::Service::ClientWriteRqst(::grpc::ServerContext* context, const ::bgasfsmsg::ClientIOWriteRqstMsg* request, ::bgasfsmsg::ClientIOWriteRspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status BGASFSMsg::Service::MDSDataPrefetch(::grpc::ServerContext* context, const ::bgasfsmsg::DataPrefetchRqstMsg* request, ::bgasfsmsg::DataPrefetchRspMsg* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace bgasfsmsg

